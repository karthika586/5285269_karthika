#include <stdio.h>
#include <stdlib.h>
#define MAX 100000  
typedef struct {
    int arr[MAX];
    int top;
} Stack;
void init(Stack* s) {
    s->top = -1;
}
int isEmpty(Stack* s) {
    return s->top == -1;
}
void push(Stack* s, int val) {
    s->arr[++(s->top)] = val;
}
int pop(Stack* s) {
    return s->arr[(s->top)--];
}
int peek(Stack* s) {
    return s->arr[s->top];
}
typedef struct {
    Stack s1, s2;
} Queue;
void initQueue(Queue* q) {
    init(&(q->s1));
    init(&(q->s2));
}
void enqueue(Queue* q, int x) {
    push(&(q->s1), x);
}
void dequeue(Queue* q) {
    if (isEmpty(&(q->s2))) {
        while (!isEmpty(&(q->s1))) {
            push(&(q->s2), pop(&(q->s1)));
        }
    }
    if (!isEmpty(&(q->s2))) {
        pop(&(q->s2));
    }
}
void printFront(Queue* q) {
    if (isEmpty(&(q->s2))) {
        while (!isEmpty(&(q->s1))) {
            push(&(q->s2), pop(&(q->s1)));
        }
    }
    if (!isEmpty(&(q->s2))) {
        printf("%d\n", peek(&(q->s2)));
    }
}
int main() {
    int q;
    scanf("%d", &q);
    Queue queue;
    initQueue(&queue);
    while (q--) {
        int type, x;
        scanf("%d", &type);
        if (type == 1) {  
            scanf("%d", &x);
            enqueue(&queue, x);
        } 
        else if (type == 2) {  
            dequeue(&queue);
        } 
        else if (type == 3) {  
            printFront(&queue);
        }
    }
    return 0;
}
